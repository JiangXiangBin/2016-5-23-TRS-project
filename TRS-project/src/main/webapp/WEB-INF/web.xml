<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
	<display-name></display-name>
	<!-- 1.启动一个WEB项目的时候,容器(如:Tomcat)会去读它的配置文件web.xml.读两个节点: <listener></listener> 
		和 <context-param></context-param> 2.紧接着,容器创建一个ServletContext(上下文),这个WEB项目所有部分都将共享这个上下文. 
		3.容器将<context-param></context-param>转化为键值对,并交给ServletContext. 4.容器创建<listener></listener>中的类实例,即创建监听. 
		5.在监听中会有contextInitialized(ServletContextEvent args)初始化方法, 在这个方法中获得ServletContext 
		= ServletContextEvent.getServletContext(); context-param的值 = ServletContext.getInitParameter("context-param的键"); 
		6.得到这个context-param的值之后,你就可以做一些操作了.注意,这个时候你的WEB项目还没有完全启动完成.这个动作会比所有的Servlet都要早. 
		7.你对<context-param>中的键值做的操作,将在你的WEB项目完全启动之前被执行. 举例.你可能想在项目启动之前就打开数据库.那么这里就可以在<context-param>中设置数据库的连接方式, 
		在监听类中初始化数据库的连接. 所以:可以自定义context-param,且自定义listener来获取这些信息 -->

	<!-- 加载所有的配置文件 -->
	<context-param>
		<!-- contextConfigLocation上下文配置路径 -->
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:config/*.xml</param-value>
	</context-param>
	<!-- 配置Spring监听 -->
	<listener>
		<!-- spring web包目录下面的 -->
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- 配置SpringMVC -->
	<servlet>
		<servlet-name>springMVC</servlet-name>
		<!-- 配置前端控制器，将所有的*.do的请求交给前端控制器去处理 spring webmvc包下面的 -->
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<!-- 上下文配置路径 -->
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:config/spring-mvc.xml</param-value>
		</init-param>
		<!--当>0 容器一启动时就创建servlet对象实例 -->
		<load-on-startup>1</load-on-startup>
	</servlet> 
	<servlet-mapping>
		<servlet-name>springMVC</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>

	<!-- 配置字符集，防止登录的时候出现中文乱码问题，导致登录失败 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<!-- spring web包下面的 -->
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- Hibernate 允许对关联对象、属性进行延迟加载，但是必须保证延迟加载的操作限于同一个 Hibernate Session 范围之内进行。 
		如果 Service 层返回一个启用了延迟加载功能的领域对象给 Web 层，当 Web 层访问到那些需要延迟加载的数据时， 由于加载领域对象的 Hibernate 
		Session 已经关闭，这些导致延迟加载数据的访问异常。 而Spring为我们提供的OpenSessionInViewFilter过滤器为我们很好的解决了这个问题。 
		OpenSessionInViewFilter的主要功能是使每个请求过程绑定一个 Hibernate Session， 即使最初的事务已经完成了，也可以在 
		Web 层进行延迟加载的操作。 OpenSessionInViewFilter 过滤器将 Hibernate Session 绑定到请求线程中，它将自动被 
		Spring 的事务管理器探测到。 所以 OpenSessionInViewFilter 适用于 Service 层使用HibernateTransactionManager 
		或 JtaTransactionManager 进行事务管理的环境，也可以用于非事务只读的数据操作中。 -->
	<!-- 配置Session,便于延迟加载 -->
	<filter>
		<filter-name>openSession</filter-name>
		<!-- spring orm包下面的 -->
		<filter-class>org.springframework.orm.hibernate4.support.OpenSessionInViewFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>openSession</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>


	 <!--   配置登陆过滤器 -->
	<filter>
		<filter-name>LoginFilter</filter-name>
		<!--   class里面（包名.类名）--> 
		<filter-class>filter.FilterLogin</filter-class>
	</filter>

	<filter-mapping>

		<filter-name>LoginFilter</filter-name>
		<url-pattern>*.jsp</url-pattern>
	</filter-mapping>
    




	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
</web-app>